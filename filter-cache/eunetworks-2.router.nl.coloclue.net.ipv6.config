filter peer_in_AS112_ipv6
prefix set AUTOFILTER_AS112_IPv6;
int set bogon_asns;
{
    # Scrub BLACKHOLE Community from peering partners
    bgp_community.delete((65535, 666));

    # ignore bogon AS_PATHs
    bogon_asns = BOGON_ASNS;
    if ( bgp_path ~ bogon_asns ) then {
        print "Reject: bogon AS_PATH: ", net, " ", bgp_path;
        reject;
    }

    include "AS112.prefixset.bird.ipv6";
    if ( is_coloclue_more_specific() ) then {
        print "Reject: 8283 more specific: ", net, " ", bgp_path, " filter: peer_in_AS112_ipv6";
        reject;
    }
    if ( is_bogon() ) then {
        print "Reject: bogon: ", net, " ", bgp_path, " filter: peer_in_AS112_ipv6";
        reject;
    }
    if is_roa_covered_prefix() then {
        if ! complies_with_roa() then {
            /* print "Reject: ROA check failed for ", net, " ", bgp_path, " filter: peer_in_AS112_ipv6"; */
            bgp_community.add((8283,100));
            bgp_large_community.add((8283, 0, 100));
        }
    }
    if (net ~ AUTOFILTER_AS112_IPv6) then {
        bgp_med = 0;
        bgp_local_pref = 100;
        # Scrub BGP Communities (RFC 7454 Section 11)
        bgp_community.delete([(8283, *)]);
        bgp_large_community.delete([(8283, *, *)]);

        bgp_community.add((8283,1)); /* mark peering routes as peering routes */
        bgp_large_community.add((8283, 0, 1)); /* mark peering routes as peering routes */
        accept;
    }
    print "Reject: No IRR? ", net, " ", bgp_path, " filter: peer_in_AS112_ipv6";
    reject;
}protocol bgp peer_AS112_1 {
    description "AS112 Project (Hosted by RIPE NCC at AMS-IX)";
    neighbor 2001:7f8:1::a500:112:1 as 112;
    local as 8283;
    next hop self;
    receive limit 5 action restart;
    import keep filtered;
    import filter peer_in_AS112_ipv6;
    export where ebgp_peering_export(112);
    password "largecommunitiesftw";
}filter peer_in_AS196752_ipv6
prefix set AUTOFILTER_AS196752_IPv6;
int set bogon_asns;
{
    # Scrub BLACKHOLE Community from peering partners
    bgp_community.delete((65535, 666));

    # ignore bogon AS_PATHs
    bogon_asns = BOGON_ASNS;
    if ( bgp_path ~ bogon_asns ) then {
        print "Reject: bogon AS_PATH: ", net, " ", bgp_path;
        reject;
    }

    include "AS196752.prefixset.bird.ipv6";
    if ( is_coloclue_more_specific() ) then {
        print "Reject: 8283 more specific: ", net, " ", bgp_path, " filter: peer_in_AS196752_ipv6";
        reject;
    }
    if ( is_bogon() ) then {
        print "Reject: bogon: ", net, " ", bgp_path, " filter: peer_in_AS196752_ipv6";
        reject;
    }
    if is_roa_covered_prefix() then {
        if ! complies_with_roa() then {
            /* print "Reject: ROA check failed for ", net, " ", bgp_path, " filter: peer_in_AS196752_ipv6"; */
            bgp_community.add((8283,100));
            bgp_large_community.add((8283, 0, 100));
        }
    }
    if (net ~ AUTOFILTER_AS196752_IPv6) then {
        bgp_med = 0;
        bgp_local_pref = 100;
        # Scrub BGP Communities (RFC 7454 Section 11)
        bgp_community.delete([(8283, *)]);
        bgp_large_community.delete([(8283, *, *)]);

        bgp_community.add((8283,1)); /* mark peering routes as peering routes */
        bgp_large_community.add((8283, 0, 1)); /* mark peering routes as peering routes */
        accept;
    }
    print "Reject: No IRR? ", net, " ", bgp_path, " filter: peer_in_AS196752_ipv6";
    reject;
}protocol bgp peer_AS196752_1 {
    description "Tilaa";
    neighbor 2001:7f8:1:0:a500:19:6752:1 as 196752;
    local as 8283;
    next hop self;
    receive limit 1000 action restart;
    import keep filtered;
    import filter peer_in_AS196752_ipv6;
    export where ebgp_peering_export(196752);
}filter peer_in_AS3265_ipv6
prefix set AUTOFILTER_AS3265_IPv6;
int set bogon_asns;
{
    # Scrub BLACKHOLE Community from peering partners
    bgp_community.delete((65535, 666));

    # ignore bogon AS_PATHs
    bogon_asns = BOGON_ASNS;
    if ( bgp_path ~ bogon_asns ) then {
        print "Reject: bogon AS_PATH: ", net, " ", bgp_path;
        reject;
    }

    include "AS3265.prefixset.bird.ipv6";
    if ( is_coloclue_more_specific() ) then {
        print "Reject: 8283 more specific: ", net, " ", bgp_path, " filter: peer_in_AS3265_ipv6";
        reject;
    }
    if ( is_bogon() ) then {
        print "Reject: bogon: ", net, " ", bgp_path, " filter: peer_in_AS3265_ipv6";
        reject;
    }
    if is_roa_covered_prefix() then {
        if ! complies_with_roa() then {
            /* print "Reject: ROA check failed for ", net, " ", bgp_path, " filter: peer_in_AS3265_ipv6"; */
            bgp_community.add((8283,100));
            bgp_large_community.add((8283, 0, 100));
        }
    }
    if (net ~ AUTOFILTER_AS3265_IPv6) then {
        bgp_med = 0;
        bgp_local_pref = 100;
        # Scrub BGP Communities (RFC 7454 Section 11)
        bgp_community.delete([(8283, *)]);
        bgp_large_community.delete([(8283, *, *)]);

        bgp_community.add((8283,1)); /* mark peering routes as peering routes */
        bgp_large_community.add((8283, 0, 1)); /* mark peering routes as peering routes */
        accept;
    }
    print "Reject: No IRR? ", net, " ", bgp_path, " filter: peer_in_AS3265_ipv6";
    reject;
}protocol bgp peer_AS3265_1 {
    description "XS4ALL";
    neighbor 2001:7f8:1::a500:3265:1 as 3265;
    local as 8283;
    next hop self;
    receive limit 1000 action restart;
    import keep filtered;
    import filter peer_in_AS3265_ipv6;
    export where ebgp_peering_export(3265);
}protocol bgp peer_AS3265_3 {
    description "XS4ALL";
    neighbor 2001:7f8:1::a500:3265:2 as 3265;
    local as 8283;
    next hop self;
    receive limit 1000 action restart;
    import keep filtered;
    import filter peer_in_AS3265_ipv6;
    export where ebgp_peering_export(3265);
}filter peer_in_AS3356_ipv6
prefix set AUTOFILTER_AS3356_IPv6;
int set bogon_asns;
{
    # Scrub BLACKHOLE Community from peering partners
    bgp_community.delete((65535, 666));

    # ignore bogon AS_PATHs
    bogon_asns = BOGON_ASNS;
    if ( bgp_path ~ bogon_asns ) then {
        print "Reject: bogon AS_PATH: ", net, " ", bgp_path;
        reject;
    }

    include "AS3356.prefixset.bird.ipv6";
    if ( is_coloclue_more_specific() ) then {
        print "Reject: 8283 more specific: ", net, " ", bgp_path, " filter: peer_in_AS3356_ipv6";
        reject;
    }
    if ( is_bogon() ) then {
        print "Reject: bogon: ", net, " ", bgp_path, " filter: peer_in_AS3356_ipv6";
        reject;
    }
    if is_roa_covered_prefix() then {
        if ! complies_with_roa() then {
            /* print "Reject: ROA check failed for ", net, " ", bgp_path, " filter: peer_in_AS3356_ipv6"; */
            bgp_community.add((8283,100));
            bgp_large_community.add((8283, 0, 100));
        }
    }
    if (net ~ AUTOFILTER_AS3356_IPv6) then {
        bgp_med = 0;
        bgp_local_pref = 100;
        # Scrub BGP Communities (RFC 7454 Section 11)
        bgp_community.delete([(8283, *)]);
        bgp_large_community.delete([(8283, *, *)]);

        bgp_community.add((8283,1)); /* mark peering routes as peering routes */
        bgp_large_community.add((8283, 0, 1)); /* mark peering routes as peering routes */
        accept;
    }
    print "Reject: No IRR? ", net, " ", bgp_path, " filter: peer_in_AS3356_ipv6";
    reject;
}protocol bgp peer_AS3356_1 {
    description "Level3";
    neighbor 2001:1900::4:35 as 3356;
    local as 8283;
    next hop self;
    receive limit 25000 action restart;
    import keep filtered;
    import filter ebgp_unfiltered_peering_import;
    export where ebgp_peering_export(3356);
    multihop;
    source address 2a02:898:0:300::3;
}filter peer_in_AS49544_ipv6
prefix set AUTOFILTER_AS49544_IPv6;
int set bogon_asns;
{
    # Scrub BLACKHOLE Community from peering partners
    bgp_community.delete((65535, 666));

    # ignore bogon AS_PATHs
    bogon_asns = BOGON_ASNS;
    if ( bgp_path ~ bogon_asns ) then {
        print "Reject: bogon AS_PATH: ", net, " ", bgp_path;
        reject;
    }

    include "AS49544.prefixset.bird.ipv6";
    if ( is_coloclue_more_specific() ) then {
        print "Reject: 8283 more specific: ", net, " ", bgp_path, " filter: peer_in_AS49544_ipv6";
        reject;
    }
    if ( is_bogon() ) then {
        print "Reject: bogon: ", net, " ", bgp_path, " filter: peer_in_AS49544_ipv6";
        reject;
    }
    if is_roa_covered_prefix() then {
        if ! complies_with_roa() then {
            /* print "Reject: ROA check failed for ", net, " ", bgp_path, " filter: peer_in_AS49544_ipv6"; */
            bgp_community.add((8283,100));
            bgp_large_community.add((8283, 0, 100));
        }
    }
    if (net ~ AUTOFILTER_AS49544_IPv6) then {
        bgp_med = 0;
        bgp_local_pref = 100;
        # Scrub BGP Communities (RFC 7454 Section 11)
        bgp_community.delete([(8283, *)]);
        bgp_large_community.delete([(8283, *, *)]);

        bgp_community.add((8283,1)); /* mark peering routes as peering routes */
        bgp_large_community.add((8283, 0, 1)); /* mark peering routes as peering routes */
        accept;
    }
    print "Reject: No IRR? ", net, " ", bgp_path, " filter: peer_in_AS49544_ipv6";
    reject;
}protocol bgp peer_AS49544_1 {
    description "I3D";
    neighbor 2001:7f8:1::a504:9544:1 as 49544;
    local as 8283;
    next hop self;
    receive limit 1000 action restart;
    import keep filtered;
    import filter peer_in_AS49544_ipv6;
    export where ebgp_peering_export(49544);
}protocol bgp peer_AS49544_5 {
    description "I3D";
    neighbor 2001:7f8:13::a504:9544:1 as 49544;
    local as 8283;
    next hop self;
    receive limit 1000 action restart;
    import keep filtered;
    import filter peer_in_AS49544_ipv6;
    export where ebgp_peering_export(49544);
}protocol bgp peer_AS49544_9 {
    description "I3D";
    neighbor 2001:7f8:13::a504:9544:2 as 49544;
    local as 8283;
    next hop self;
    receive limit 1000 action restart;
    import keep filtered;
    import filter peer_in_AS49544_ipv6;
    export where ebgp_peering_export(49544);
}filter peer_in_AS47065_ipv6
prefix set AUTOFILTER_AS47065_IPv6;
int set bogon_asns;
{
    # Scrub BLACKHOLE Community from peering partners
    bgp_community.delete((65535, 666));

    # ignore bogon AS_PATHs
    bogon_asns = BOGON_ASNS;
    if ( bgp_path ~ bogon_asns ) then {
        print "Reject: bogon AS_PATH: ", net, " ", bgp_path;
        reject;
    }

    include "AS47065.prefixset.bird.ipv6";
    if ( is_coloclue_more_specific() ) then {
        print "Reject: 8283 more specific: ", net, " ", bgp_path, " filter: peer_in_AS47065_ipv6";
        reject;
    }
    if ( is_bogon() ) then {
        print "Reject: bogon: ", net, " ", bgp_path, " filter: peer_in_AS47065_ipv6";
        reject;
    }
    if is_roa_covered_prefix() then {
        if ! complies_with_roa() then {
            /* print "Reject: ROA check failed for ", net, " ", bgp_path, " filter: peer_in_AS47065_ipv6"; */
            bgp_community.add((8283,100));
            bgp_large_community.add((8283, 0, 100));
        }
    }
    if (net ~ AUTOFILTER_AS47065_IPv6) then {
        bgp_med = 0;
        bgp_local_pref = 100;
        bgp_community.add((8283,2));
        bgp_large_community.add((8283,0, 2));
        if (8283, 50) ~ bgp_community then bgp_local_pref = 50;
        if (8283, 150) ~ bgp_community then bgp_local_pref = 150;
        if (8283, 1, 50) ~ bgp_large_community then bgp_local_pref = 50;
        if (8283, 1, 150) ~ bgp_large_community then bgp_local_pref = 150;
        accept;
    }
    print "Reject: No IRR? ", net, " ", bgp_path, " filter: peer_in_AS47065_ipv6";
    reject;
}protocol bgp peer_AS47065_1 {
    description "BGPMUX / PEERING TestBed";
    neighbor 2001:7f8:1::a504:7065:1 as 47065;
    local as 8283;
    next hop self;
    receive limit 50 action restart;
    import keep filtered;
    import filter peer_in_AS47065_ipv6;
    export where full_table_export(47065);
}