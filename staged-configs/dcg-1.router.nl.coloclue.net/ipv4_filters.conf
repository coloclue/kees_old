filter only_loopbacks {
    if net ~ [ 94.142.247.0/28{32,32} ] then accept;
    reject;
}

function is_coloclue_supernet()
prefix set coloclue;
{
    coloclue = [
        94.142.240.0/21,  /* Coloclue IPv4 PA space */        185.52.224.0/22,  /* Coloclue IPv4 PA space */        195.114.12.0/24,  /* Melchior Aelmans */        195.72.124.0/22  /* Jurrian van Iersel */    ];
    if net ~ coloclue then return true;
    return false;
}

function is_coloclue_more_specific()
prefix set coloclue;
{
    coloclue = [
        94.142.240.0/21{21,32},  /* Coloclue IPv4 PA space */        185.52.224.0/22{22,32},  /* Coloclue IPv4 PA space */        195.114.12.0/24{24,32},  /* Melchior Aelmans */        195.72.124.0/22{22,32}  /* Jurrian van Iersel */    ];
    if net ~ coloclue then return true;
    return false;
}

function is_bogon()
prefix set bogons;
{
    bogons = [
        0.0.0.0/8{8,32},  /* IANA - Local Identification */        10.0.0.0/8{8,32},  /* RFC 1918 - Private Use */        127.0.0.0/8{8,32},  /* IANA - Loopback */        169.254.0.0/16{16,32},  /* RFC 3927 - Link Local */        172.16.0.0/12{12,32},  /* RFC 1918 - Private Use */        192.0.2.0/24{24,32},  /* RFC 5737 - TEST-NET-1 */        192.168.0.0/16{16,32},  /* RFC 1918 - Private Use */        198.18.0.0/15{15,32},  /* RFC 2544 - Network Interconnect Device Benchmark Testing */        198.51.100.0/24{24,32},  /* RFC 5737 - TEST-NET-2 */        203.0.113.0/24{24,32},  /* RFC 5737 - TEST-NET-3 */        224.0.0.0/3{3,32},  /* RFC 5771 - Multcast (formerly Class D) */        100.64.0.0/10{10,32},  /* RFC 6598 - Shared Address Space */        193.239.116.0/22{22,32},  /* IXP: NL-IX Public Peering LAN */        80.249.208.0/21{21,32},  /* IXP: AMS-IX Public Peering LAN */        164.138.24.80/29{29,32},  /* Tilaa OOB */    ];
    if net ~ bogons then return true;
    return false;
}

/*
    This filter is used for peers for which
    we cannot do strict IRR filtering
*/
filter ebgp_unfiltered_peering_import
prefix set acceptable_sizes;
int set bogon_asns;
{
    # ignore bogon AS_PATHs
    bogon_asns = BOGON_ASNS;
    if ( bgp_path ~ bogon_asns ) then {
        print "Reject: bogon AS_PATH: ", net, " ", bgp_path;
        reject;
    }

    if ( is_coloclue_more_specific() ) then reject;
    if ( is_bogon() ) then reject;
    if roa_check('rpki', net, bgp_path.last) = ROA_INVALID then {
        print "ROA check failed for ", net, " ASN ", bgp_path.last;
        reject;
    }
    acceptable_sizes = [ 0.0.0.0/0{8,24} ];
    if ( net ~ acceptable_sizes ) then {
        bgp_med = 0;
        bgp_local_pref = 100;
        bgp_community.add((8283,1));
        bgp_large_community.add((8283, 0, 1));
        accept;
    }
    reject;
}