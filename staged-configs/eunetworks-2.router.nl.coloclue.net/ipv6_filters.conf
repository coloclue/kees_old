filter only_loopbacks {
    if net ~ [ 2a02:898:0:300:0:0:0:0/64{128,128} ] then accept;
    reject;
}

function is_coloclue_supernet()
prefix set coloclue;
{
    coloclue = [
        2a02:898::/32,  /* Coloclue IPv6 PA space */    ];
    if net ~ coloclue then return true;
    return false;
}

function is_coloclue_more_specific()
prefix set coloclue;
{
    coloclue = [
        2a02:898::/32{32,128},  /* Coloclue IPv6 PA space */    ];
    if net ~ coloclue then return true;
    return false;
}

function is_bogon()
prefix set bogons;
{
    bogons = [
        0000::/8{8,128},  /* loopback, unspecified, v4-mapped */        0064:ff9b::/96{96,128},  /* RFC 6052 - IPv4-IPv6 Translation */        0100::/8{8,128},  /* RFC 6666 - reserved for Discard-Only Address Block */        0200::/7{7,128},  /* RFC 4048 - Reserved by IETF */        0400::/6{6,128},  /* RFC 4291 - Reserved by IETF */        0800::/5{5,128},  /* RFC 4291 - Reserved by IETF */        1000::/4{4,128},  /* RFC 4291 - Reserved by IETF */        2001::/33{33,128},  /* RFC 4380 - Teredo prefix */        2001:0:8000::/33{33,128},  /* RFC 4380 - Teredo prefix */        2001:0002::/48{48,128},  /* RFC 5180 - Benchmarking */        2001:0003::/32{32,128},  /* RFC 7450 - Automatic Multicast Tunneling */        2001:10::/28{28,128},  /* RFC 4843 - Deprecated ORCHID */        2001:20::/28{28,128},  /* RFC 7343 - ORCHIDv2 */        2001:db8::/32{32,128},  /* RFC 3849 - NON-ROUTABLE range to be used for documentation purpose */        2002::/16{16,128},  /* RFC 3068 - 6to4 prefix */        3ffe::/16{16,128},  /* RFC 5156 - used for the 6bone but was returned */        4000::/3{3,128},  /* RFC 4291 - Reserved by IETF */        5f00::/8{8,128},  /* RFC 5156 - used for the 6bone but was returned */        6000::/3{3,128},  /* RFC 4291 - Reserved by IETF */        8000::/3{3,128},  /* RFC 4291 - Reserved by IETF */        a000::/3{3,128},  /* RFC 4291 - Reserved by IETF */        c000::/3{3,128},  /* RFC 4291 - Reserved by IETF */        e000::/4{4,128},  /* RFC 4291 - Reserved by IETF */        f000::/5{5,128},  /* RFC 4291 - Reserved by IETF */        f800::/6{6,128},  /* RFC 4291 - Reserved by IETF */        fc00::/7{7,128},  /* RFC 4193 - Unique Local Unicast */        fe80::/10{10,128},  /* RFC 4291 - Link Local Unicast */        fec0::/10{10,128},  /* RFC 4291 - Reserved by IETF */        ff00::/8{8,128}  /* RFC 4291 - Multicast */    ];
    if net ~ bogons then return true;
    return false;
}

/*
    This filter is used for peers for which
    we cannot do strict IRR filtering
*/
filter ebgp_unfiltered_peering_import
prefix set acceptable_sizes;
int set bogon_asns;
{
    # ignore bogon AS_PATHs
    bogon_asns = BOGON_ASNS;
    if ( bgp_path ~ bogon_asns ) then {
        print "Reject: bogon AS_PATH: ", net, " ", bgp_path;
        reject;
    }

    if ( is_coloclue_more_specific() ) then reject;
    if ( is_bogon() ) then reject;
    if roa_check('rpki', net, bgp_path.last) = ROA_INVALID then {
        print "ROA check failed for ", net, " ASN ", bgp_path.last;
        reject;
    }
    acceptable_sizes = [ 2000::/3{12,48} ];
    if ( net ~ acceptable_sizes ) then {
        bgp_med = 0;
        bgp_local_pref = 100;
        bgp_community.add((8283,1));
        bgp_large_community.add((8283, 0, 1));
        accept;
    }
    reject;
}